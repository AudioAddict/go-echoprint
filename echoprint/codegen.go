package echoprint

import (
	"encoding/json"
	"io/ioutil"
)

type echoprintMeta struct {
	Version  float64 `json:"version"`
	Filename string  `json:"filename"`
}

// CodegenFp represents a parsed json fingerprint generated by codegen
type CodegenFp struct {
	Metadata echoprintMeta `json:"metadata"`
	Code     string        `json:"code"`
	TrackID  uint32        `json:"track_id"`
}

// ParseCodegenFile is a helper method for testing, parses a json file generated by codegen
// and returns and array of CodegenFp stucts
func ParseCodegenFile(path string) ([]CodegenFp, error) {
	jsonData, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, err
	}

	return ParseCodegen(jsonData)
}

// ParseCodegen parses the json generated by codegen and returns and array of CodegenFp stucts
func ParseCodegen(jsonData []byte) ([]CodegenFp, error) {
	t := trackTime("ParseCodegen")
	defer t.finish()

	var fpList []CodegenFp
	err := json.Unmarshal(jsonData, &fpList)
	return fpList, err
}
